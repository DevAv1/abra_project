{"version":3,"sources":["store/actions/actions-types.ts","store/reducers/weathers.ts","services/api.ts","store/actions/weather.actions.ts","store/selectors/index.ts","components/home/components/SearchWeather.tsx","hooks/useDebounce.tsx","components/shared-components/WeatherCard.tsx","components/home/Home.tsx","components/header/Header.tsx","components/favorites/Favorites.tsx","components/appWrapper/AppWrapper.tsx","App.tsx","reportWebVitals.ts","store/index.ts","store/reducers/index.ts","index.tsx"],"names":["ActionTypes","FavoritesStatus","getAllWeatherForecast","locationCode","currentWeather","axios","process","forecastWeather","Promise","all","err","console","error","getAllForecastWeatherAction","log","dispatch","a","allWeatherData","type","GET_ALL_FORECAST_DATA","getWeathersSelector","weathers","SearchWeather","useState","searchTerm","setSearchTerm","debouncedSearchTerm","value","delay","debouncedValue","setDebouncedValue","useEffect","handler","setTimeout","clearTimeout","useDebounce","results","setResults","isSearching","setIsSearching","weatherStore","useSelector","useDispatch","favorites","length","SET_CURRENT_LOCATION_NAME","locationDetails","cityName","cityCode","fetchAutoCompleteData","searchCharacters","autoCompleteResolve","autoCompleteListFormat","data","map","result","label","LocalizedName","code","Key","className","Autocomplete","disablePortal","id","selectOnFocus","loading","options","sx","width","onChange","event","name","handleLocationChange","renderOption","props","option","key","renderInput","params","TextField","e","target","WeatherCard","forecast","favOption","locationName","setFavorite","isFavorite","checkFavorite","DELETE_FAVORITE","newFavoriteForecast","getState","ADD_FAVORITES","addToFavoritesAction","find","location","color","onClick","date","d","Date","weekday","Array","getDay","getActualDay","isCelcius","Math","round","Temperature","Maximum","Value","Day","IconPhrase","Home","Switch","checked","SET_TEMP_UNIT","weatherData","currentForecast","weeklyForecast","index","Header","to","Button","variant","Favorites","favoritesData","getFavoriteForecast","AppWrapper","exact","path","component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","state","action","DailyForecasts","filteredFavorites","filter","store","createStore","combineReducers","composeWithDevTools","compose","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0103999b.chunk.js","sourcesContent":["export enum ActionTypes {\r\n  GET_CURRENT_WEATHER = \"GET_CURRENT_WEATHER\",\r\n  SET_CURRENT_LOCATION_NAME = \"GET_CURRENT_LOCATION_NAME\",\r\n  GET_WEEKLY_FORECAST = \"GET_WEEKLY_FORECAST\",\r\n  GET_ALL_FORECAST_DATA = \"GET_ALL_FORECAST_DATA\",\r\n  ADD_FAVORITE = \"ADD_FAVORITE\",\r\n  ADD_FAVORITES = \"GET_FAVORITES\",\r\n  DELETE_FAVORITE = \"DELETE_FAVORITE\",\r\n  SET_TEMP_UNIT = \"SET_TEMP_UNIT\"\r\n}","import { ActionTypes} from '../actions/actions-types';\r\n\r\nexport enum FavoritesStatus {\r\n  IS_FAVORITE = \"IS_FAVORITE\",\r\n  ONCE_FAVORITE = \"ONCE_FAVORITE\",\r\n}\r\n\r\ninterface InitialState {\r\n  weatherData:any;\r\n  favorites:any;\r\n  isCelcius:boolean;\r\n}\r\nconst initialState:InitialState = {\r\n  weatherData : {},\r\n  favorites: [],\r\n  isCelcius: false\r\n}\r\n\r\n\r\nexport const weathers = (state = initialState, action:any) => {\r\n  switch(action.type) {\r\n    case ActionTypes.SET_CURRENT_LOCATION_NAME:\r\n      return {\r\n        ...state,\r\n        weatherData: {\r\n          ...state.weatherData,\r\n          locationName:action.locationDetails\r\n        }\r\n      }\r\n    case ActionTypes.GET_ALL_FORECAST_DATA:\r\n      const currentForecast = action.allWeatherData[0].data.DailyForecasts[0];\r\n      const weeklyForecast = action.allWeatherData[1].data.DailyForecasts;\r\n      // const currentForecast = action.allWeatherData[0].DailyForecasts[0];\r\n      // const weeklyForecast = action.allWeatherData[1].DailyForecasts;\r\n      return {\r\n        ...state,\r\n        weatherData: {\r\n          ...state.weatherData,\r\n          currentForecast,\r\n          weeklyForecast\r\n        }\r\n      }\r\n      case ActionTypes.ADD_FAVORITES:\r\n        return {\r\n          ...state, \r\n          favorites: [\r\n            ...state.favorites,\r\n            action.newFavoriteForecast\r\n          ]\r\n        }\r\n\r\n        case ActionTypes.DELETE_FAVORITE:\r\n          const filteredFavorites = state.favorites.filter((forecast:any) => forecast.locationDetails.cityCode !== action.cityCode);\r\n          return {\r\n            ...state,\r\n            favorites:filteredFavorites\r\n          }\r\n\r\n          case ActionTypes.SET_TEMP_UNIT:\r\n            return {\r\n              ...state,\r\n              isCelcius:action.isCelcius\r\n            }\r\n    default:\r\n      return state; \r\n  }\r\n}\r\n","import axios from 'axios';\r\nimport mockForecast from '../services/mock-forecast.json';\r\nimport mockAutocomplete from '../services/mock-autocomplete.json';\r\nimport mockCurrent from '../services/mock-current_weather.json';\r\n\r\n\r\nexport const getAutoComplete = (searchCharacters:any) => {  \r\n  const autoCompleteResolve = axios(`http://dataservice.accuweather.com/locations/v1/cities/autocomplete?apikey=${process.env.REACT_APP_API_KEY}&q=${searchCharacters}`);\r\n  return autoCompleteResolve\r\n  // return mockAutocomplete;\r\n   \r\n} \r\n    \r\nexport const getAllWeatherForecast = (locationCode:number) => {\r\n  try {\r\n    const currentWeather = axios(`http://dataservice.accuweather.com/forecasts/v1/daily/1day/${locationCode}?apikey=${process.env.REACT_APP_API_KEY}&metric=false`);\r\n    const forecastWeather = axios(`http://dataservice.accuweather.com/forecasts/v1/daily/5day/${locationCode}?apikey=${process.env.REACT_APP_API_KEY}&metric=false`);\r\n\r\n    return Promise.all([currentWeather, forecastWeather]);\r\n    // return [mockCurrent,mockForecast ]\r\n  } catch(err) {\r\n    console.error(err)\r\n  }\r\n}","import { ActionTypes } from './actions-types';\r\nimport {Dispatch} from 'redux'\r\nimport {getAllWeatherForecast } from '../../services/api';\r\n\r\nexport const getCurrentWeatherLocationNameAction = (locationDetails:any) => {\r\n  return async(dispatch:Dispatch) => {\r\n    try {\r\n      dispatch({\r\n        type: ActionTypes.SET_CURRENT_LOCATION_NAME,\r\n        locationDetails\r\n      })\r\n    } catch(err) {\r\n      console.error(err)\r\n    }\r\n  }\r\n}\r\n\r\nexport const getAllForecastWeatherAction = (locationCode:number) => {\r\n  console.log('fetching all forecast data...')\r\n  return async(dispatch:Dispatch) => {\r\n    try {\r\n      const allWeatherData = await getAllWeatherForecast(locationCode);\r\n      console.log('Get Data success!')\r\n      dispatch({\r\n        type:ActionTypes.GET_ALL_FORECAST_DATA,\r\n        allWeatherData\r\n      })\r\n    } catch (err) {\r\n        console.error(err)\r\n    }\r\n  }\r\n}\r\n\r\nexport const addToFavoritesAction = (forecast:any, locationDetails:any) => {\r\n  const newFavoriteForecast = {\r\n    forecast,\r\n    locationDetails\r\n  }\r\n  return async(dispatch:Dispatch, getState:any) => {\r\n    try {\r\n      dispatch({\r\n        type: ActionTypes.ADD_FAVORITES,\r\n        newFavoriteForecast\r\n      })\r\n    } catch (err) {\r\n      console.error(err)\r\n    }\r\n  }\r\n}\r\n\r\n\r\nexport const deleteFavoriteAction = (cityCode:number) => {\r\n  return async (dispatch:Dispatch) => {\r\n    try {\r\n      dispatch({\r\n        type:ActionTypes.DELETE_FAVORITE,\r\n        cityCode\r\n      })\r\n    } catch (err) {\r\n      console.error(err)\r\n    }\r\n  }\r\n}\r\n\r\n\r\nexport const setTempUnitAction = (isCelcius:boolean) => {\r\n  return async(dispatch:Dispatch) => {\r\n    try {\r\n      dispatch({\r\n        type: ActionTypes.SET_TEMP_UNIT,\r\n        isCelcius\r\n      })\r\n    } catch(err) {\r\n      console.log(err)\r\n    }\r\n  }\r\n}\r\n","export const getWeathersSelector = ({weathers}: any) => {\r\n  return weathers\r\n}","import { useState, useEffect } from \"react\";\r\nimport \"./searchWeather.scss\";\r\n\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Autocomplete from \"@mui/material/Autocomplete\";\r\n\r\nimport { getAllForecastWeatherAction } from \"../../../store/actions/weather.actions\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { getAutoComplete } from \"../../../services/api\";\r\nimport { ActionTypes } from \"../../../store/actions/actions-types\";\r\nimport { useDebounce } from \"../../../hooks/useDebounce\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { getWeathersSelector } from \"../../../store/selectors/index\";\r\n\r\nexport const SearchWeather = () => {\r\n  const [searchTerm, setSearchTerm] = useState<any>(\"\");\r\n  const debouncedSearchTerm = useDebounce(searchTerm, 500);\r\n  const [results, setResults] = useState<any>([]);\r\n  const [isSearching, setIsSearching] = useState(false);\r\n  const weatherStore = useSelector(getWeathersSelector);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    // default Tel Aviv view\r\n    const locationDetails = {\r\n      cityName: \"Tel Aviv\",\r\n      cityCode: \"215793\",\r\n    };\r\n    if (!weatherStore.favorites.length) {\r\n      dispatch({\r\n        type: ActionTypes.SET_CURRENT_LOCATION_NAME,\r\n        locationDetails,\r\n      });\r\n    }\r\n  }, []);\r\n\r\n  const handleLocationChange = (name: any) => {\r\n    const locationDetails = {\r\n      cityName: name.label,\r\n      cityCode: name.code,\r\n    };\r\n    dispatch(getAllForecastWeatherAction(locationDetails.cityCode));\r\n\r\n    dispatch({\r\n      type: ActionTypes.SET_CURRENT_LOCATION_NAME,\r\n      locationDetails,\r\n    });\r\n  };\r\n\r\n  useEffect(\r\n    () => {\r\n      if (debouncedSearchTerm) {\r\n        setIsSearching(true);\r\n        fetchAutoCompleteData(debouncedSearchTerm);\r\n        setIsSearching(false);\r\n      } else {\r\n        setResults([]);\r\n        setIsSearching(false);\r\n      }\r\n    },\r\n    [debouncedSearchTerm] // Only call effect if debounced search term changes\r\n  );\r\n\r\n  const fetchAutoCompleteData = async (searchTerm: any) => {\r\n    const autoCompleteResolve = await getAutoComplete(searchTerm);\r\n    const autoCompleteListFormat = autoCompleteResolve.data.map(\r\n      (result: any) => {\r\n        return {\r\n          label: result.LocalizedName,\r\n          code: result.Key,\r\n        };\r\n      }\r\n    );\r\n    setResults(autoCompleteListFormat);\r\n  };\r\n\r\n  return (\r\n    <div className=\"searchWeather\">\r\n      <div className=\"search-wrapper\">\r\n        <Autocomplete\r\n          disablePortal\r\n          id=\"combo-box-demo\"\r\n          selectOnFocus\r\n          loading={isSearching}\r\n          options={results}\r\n          sx={{ width: 200 }}\r\n          onChange={(event, value) => handleLocationChange(value || \"\")}\r\n          renderOption={(props, option: any) => {\r\n            return (\r\n              <li {...props} key={option.code}>\r\n                {option.label}\r\n              </li>\r\n            );\r\n          }}\r\n          renderInput={(params) => (\r\n            <TextField\r\n              {...params}\r\n              label=\"Location\"\r\n              value={searchTerm || \"Tel Aviv\"}\r\n              onChange={(e) => setSearchTerm(e.target.value)}\r\n            />\r\n          )}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import { useEffect, useState } from \"react\";\r\nexport const useDebounce = (value: string, delay: number) => {\r\n  const [debouncedValue, setDebouncedValue] = useState(value);\r\n  useEffect(() => {\r\n    const handler = setTimeout(() => {\r\n      setDebouncedValue(value);\r\n    }, delay);\r\n\r\n    return () => {\r\n      clearTimeout(handler);\r\n    };\r\n  }, [value, delay]);\r\n  return debouncedValue;\r\n};\r\n","import \"./weatherCard.scss\";\r\nimport FavoriteIcon from \"@mui/icons-material/Favorite\";\r\n\r\nimport { useSelector } from \"react-redux\";\r\nimport { getWeathersSelector } from \"../../store/selectors/index\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport {\r\n  addToFavoritesAction,\r\n  deleteFavoriteAction,\r\n} from \"../../store/actions/weather.actions\";\r\n\r\ninterface WeatherProps {\r\n  forecast?: any;\r\n  favOption?: boolean;\r\n  locationName?: string;\r\n}\r\nexport const WeatherCard: React.FC<WeatherProps> = ({\r\n  forecast,\r\n  favOption,\r\n  locationName,\r\n}: any) => {\r\n  const weatherStore = useSelector(getWeathersSelector);\r\n  const dispatch = useDispatch();\r\n  const getActualDay = (date: any) => {\r\n    let d = new Date(date);\r\n    const weekday = new Array(7);\r\n    weekday[0] = \"Sunday\";\r\n    weekday[1] = \"Monday\";\r\n    weekday[2] = \"Tuesday\";\r\n    weekday[3] = \"Wednesday\";\r\n    weekday[4] = \"Thursday\";\r\n    weekday[5] = \"Friday\";\r\n    weekday[6] = \"Saturday\";\r\n    let day = weekday[d.getDay()];\r\n    return day;\r\n  };\r\n\r\n  const setFavorite = (forecast: any, locationDetails: any) => {\r\n    const isFavorite = checkFavorite(locationDetails.cityCode);\r\n    if (!isFavorite) {\r\n      dispatch(addToFavoritesAction(forecast, locationDetails));\r\n    } else {\r\n      dispatch(deleteFavoriteAction(locationDetails.cityCode));\r\n    }\r\n  };\r\n\r\n  const checkFavorite = (code: number) => {\r\n    const favorites = weatherStore.favorites;\r\n    const found = favorites?.find(\r\n      (location: any) => location.locationDetails.cityCode === code\r\n    );\r\n    return !!found;\r\n  };\r\n\r\n  return (\r\n    <div className=\"weather-card\">\r\n      {favOption && (\r\n        <FavoriteIcon\r\n          color={checkFavorite(locationName.cityCode) ? \"secondary\" : \"primary\"}\r\n          className=\"favorite-icon\"\r\n          onClick={() => setFavorite(forecast, locationName)}\r\n        />\r\n      )}\r\n      <div className=\"weather-info\">\r\n        <div className=\"weather-cityName\">{locationName?.cityName}</div>\r\n\r\n        <div className=\"weather-title\">{getActualDay(forecast.Date)}</div>\r\n        <div className=\"weather-temp\">{`${\r\n          !weatherStore.isCelcius\r\n            ? `${forecast.Temperature?.Maximum?.Value}℉`\r\n            : `${Math.round(\r\n                (forecast.Temperature?.Maximum?.Value - 32) * 0.5556\r\n              )}°C`\r\n        }`}</div>\r\n        <div className=\"weather-status\">{`${forecast.Day.IconPhrase}`}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import { useEffect } from \"react\";\r\nimport \"./home.scss\";\r\nimport Switch from \"@mui/material/Switch\";\r\n\r\nimport { SearchWeather } from \"./components/SearchWeather\";\r\nimport { WeatherCard } from \"../shared-components/WeatherCard\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { getWeathersSelector } from \"../../store/selectors\";\r\nimport {\r\n  getAllForecastWeatherAction,\r\n  setTempUnitAction,\r\n} from \"../../store/actions/weather.actions\";\r\n\r\nexport const Home = () => {\r\n  const weatherStore = useSelector(getWeathersSelector);\r\n  const defaultCode = 215793; // Tel-Aviv code\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    if (!weatherStore.favorites.length) {\r\n      dispatch(getAllForecastWeatherAction(defaultCode));\r\n    }\r\n  }, []);\r\n\r\n  const handleTempUnit = () => {\r\n    dispatch(setTempUnitAction(!weatherStore.isCelcius));\r\n  };\r\n\r\n  return (\r\n    <div className=\"home\">\r\n      <div className=\"home__search\">\r\n        <SearchWeather />\r\n      </div>\r\n      <div className=\"home__unit-toggler\">\r\n        <span>Fahrenheit - Celcius</span>\r\n        <Switch checked={weatherStore.isCelcius} onChange={handleTempUnit} />\r\n      </div>\r\n      <div className=\"home__default-weather-view\">\r\n        <div className=\"selected-weather\">\r\n          {weatherStore?.weatherData.currentForecast && (\r\n            <WeatherCard\r\n              locationName={weatherStore.weatherData.locationName}\r\n              forecast={weatherStore.weatherData.currentForecast}\r\n              favOption={true}\r\n            />\r\n          )}\r\n        </div>\r\n      </div>\r\n      <div className=\"home__weekly-weather-view\">\r\n        {weatherStore.weatherData.weeklyForecast &&\r\n          weatherStore.weatherData.weeklyForecast.map(\r\n            (forecast: any, index: number) => {\r\n              return <WeatherCard key={index} forecast={forecast} />;\r\n            }\r\n          )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import \"./header.scss\";\r\nimport Button from \"@mui/material/Button\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport const Header = () => {\r\n  return (\r\n    <div className=\"header\">\r\n      <div className=\"header__container\">\r\n        <div className=\"header__container__logo\">\r\n          <span>Herolo</span>\r\n        </div>\r\n        <div className=\"header__container__items\">\r\n          <div className=\"header_item\">\r\n            <Link to=\"/\">\r\n              <Button variant=\"contained\">Home</Button>\r\n            </Link>\r\n          </div>\r\n          <div className=\"header_item\">\r\n            <Link to=\"/favorites\">\r\n              <Button variant=\"contained\">Favorites</Button>\r\n            </Link>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport \"./favorites.scss\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { getWeathersSelector } from \"../../store/selectors/index\";\r\nimport { WeatherCard } from \"../../components/shared-components/WeatherCard\";\r\nimport { Link } from \"react-router-dom\";\r\nimport {\r\n  getAllForecastWeatherAction,\r\n  getCurrentWeatherLocationNameAction,\r\n} from \"../../store/actions/weather.actions\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nexport const Favorites = () => {\r\n  const favoritesData = useSelector(getWeathersSelector);\r\n  const dispatch = useDispatch();\r\n\r\n  const getFavoriteForecast = (forecast: any) => {\r\n    dispatch(getCurrentWeatherLocationNameAction(forecast.locationDetails));\r\n    dispatch(getAllForecastWeatherAction(forecast.locationDetails.cityCode));\r\n  };\r\n  return (\r\n    <div className=\"favorites\">\r\n      {favoritesData.favorites.length &&\r\n        favoritesData.favorites.map((forecast: any) => {\r\n          return (\r\n            <Link to=\"/\" key={forecast.locationDetails.cityCode}>\r\n              <div onClick={() => getFavoriteForecast(forecast)}>\r\n                <WeatherCard\r\n                  locationName={forecast.locationDetails}\r\n                  forecast={forecast.forecast}\r\n                  favOption={false}\r\n                />\r\n              </div>\r\n            </Link>\r\n          );\r\n        })}\r\n    </div>\r\n  );\r\n};\r\n","import \"./appWrapper.scss\";\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport { Home } from \"../home/Home\";\r\nimport { Header } from \"../header/Header\";\r\nimport { Favorites } from \"../favorites/Favorites\";\r\n\r\nexport const AppWrapper = () => {\r\n  return (\r\n    <div className=\"app_wrapper\">\r\n      <Router>\r\n        <Header />\r\n        <Switch>\r\n          <Route exact path=\"abra_project/\" component={Home} />\r\n          <Route exact path=\"abra_project/favorites\" component={Favorites} />\r\n        </Switch>\r\n      </Router>\r\n    </div>\r\n  );\r\n};\r\n","import \"./App.css\";\nimport { AppWrapper } from \"./components/appWrapper/AppWrapper\";\n\nexport const App = () => {\n  return (\n    <div className=\"App\">\n      <AppWrapper />\n    </div>\n  );\n};\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { \r\n  createStore,\r\n  compose,\r\n  applyMiddleware\r\n} from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\n\r\nimport thunk from 'redux-thunk';\r\nimport { reducers } from '../store/reducers';\r\n\r\nexport const store = createStore(\r\n  reducers(),\r\n  composeWithDevTools(compose(applyMiddleware(thunk)))\r\n);","import { combineReducers} from 'redux';\r\nimport { weathers} from './weathers';\r\n\r\nexport const reducers = () => {\r\n  return combineReducers({\r\n    weathers\r\n  })\r\n}\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { App } from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./store\";\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nreportWebVitals();\n"],"sourceRoot":""}